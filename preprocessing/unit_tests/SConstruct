#! /usr/bin/python

# @file
# This file is part of SeisSol.
# 
# @author Alexander Breuer (breuera AT in.tum.de, http://www5.in.tum.de/wiki/index.php/Dipl.-Math._Alexander_Breuer)
# @author Sebastian Rettenberger (rettenbs AT in.tum.de, http://www5.in.tum.de/wiki/index.php/Sebastian_Rettenberger,_M.Sc.)
# 
# 
# @section LICENSE
# This software was developed at Technische Universitaet Muenchen, who is the owner of the software.
# 
# According to good scientific practice, publications on results achieved in whole or in part due to this software should cite at least one paper or referring to an URL presenting this software.
# 
# The owner wishes to make the software available to all users to use, reproduce, modify, distribute and redistribute also for commercial purposes under the following conditions of the original BSD license. Linking this software module statically or dynamically with other modules is making a combined work based on this software. Thus, the terms and conditions of this license cover the whole combination. As a special exception, the copyright holders of this software give you permission to link it with independent modules or to instantiate templates and macros from this software's source files to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of this license of that module.
# 
# Copyright (c) 2013
# Technische Universitaet Muenchen
# Department of Informatics
# Chair of Scientific Computing
# http://www5.in.tum.de/
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# All advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the Technische Universitaet Muenchen (TUM), Germany, and its contributors.
# Neither the name of the Technische Universitaet Muenchen, Munich, Germany nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
#
# @section DESCRIPTION
#
# Builds the unit tests of the kernel genration.
#

# operation system (required for exectuion environment)
import os
import sys

# print the welcome message
print '*************************************'
print '** Welcome to the build script of  **'
print '** the kernel_genration unit tests **'
print '*************************************'
print ' Copyright (c) 2013'
print ' Technische Universitaet Muenchen'
print ' Department of Informatics'
print ' Chair of Scientific Computing'
print ' http://www5.in.tum.de/'
print ''
print ' All rights reserved.'
print ''

# Check if we the user wants to show help only
if '-h' in sys.argv or '--help' in sys.argv:
  helpMode = True
else:
  helpMode = False
  
def ConfigurationError(msg):
    """Print the error message and exit. Continue only
    if the user wants to show the help message"""
    
    if not helpMode:
        print msg
        Exit(1) 

#
# set possible variables
#
vars = Variables()

# read parameters from a file if given
vars.AddVariables(
  PathVariable( 'buildVariablesFile', 'location of the python file, which contains the build variables', None, PathVariable.PathIsFile )
)
env = Environment(variables=vars)
if 'buildVariablesFile' in env:
  vars = Variables(env['buildVariablesFile'])

# SeisSol specific variables
vars.AddVariables(
  EnumVariable( 'numberOfBasisFunctions',
                'number of basis functions used in the DG-method (depends on the order of the method)',
                'none',
                allowed_values=('none', '1', '4', '10', '20', '35', '56', '84', '120')
              ),

  PathVariable( 'buildDir', 'where to build the code', 'build', PathVariable.PathIsDirCreate ),
  
  EnumVariable( 'compileMode', 'mode of the compilation', 'release',
                allowed_values=('debug', 'release')
              ),

  EnumVariable( 'logLevel',
                'logging level. \'debug\' runs assertations and prints all information available, \'info\' prints information at runtime (time step, plot number), \'warning\' prints warnings during runtime, \'error\' is most basic and prints errors only',
                'info',
                allowed_values=('debug', 'info', 'warning', 'error')
              )
)

# external variables
vars.AddVariables(
  PathVariable( 'cppCompiler',
                'C++ compiler (default: icpc (serial), mpiCC (parallel).',
                None,
                PathVariable.PathAccept ),
                
  PathVariable( 'fortranCompiler',
                'Fortran compiler (default: ifort (serial), mpif90 (parallel). Is used as Linker too.',
                None,
                PathVariable.PathAccept ),
                
  BoolVariable( 'useExecutionEnvironment',
                'set variables set in the execution environment ($PATH, $LIBRARY_PATH, $LD_LIBRARY_PATH, $CPLUS_INCLUDE_PATH, $INTEL_LICENSE_FILE, $OMPI_FC, $OMPI_CXX)',
                False ),
                
  EnumVariable( 'vectorInstructionSet',
                'vector instruction used (required in release mode). Depends on the compute node architecture. \'compile_node\' assumes architecture of the compile node.',
                'none',
                allowed_values=('none', 'sse3','avx', 'compile_node')
              ),
)

# set environment
env = Environment(variables=vars)

if env['useExecutionEnvironment'] == True:
  if 'PATH' in os.environ:
    env.AppendENVPath( 'PATH', os.environ['PATH'] )
  if 'LIBRARY_PATH' in os.environ:
    env.AppendENVPath( 'LIBRARY_PATH', os.environ['LIBRARY_PATH'] )
    env.Append(RPATH=[os.environ['LIBRARY_PATH']])
  if 'LD_LIBRARY_PATH' in os.environ:
    env.AppendENVPath( 'LD_LIBRARY_PATH', os.environ['LD_LIBRARY_PATH'] )
  if 'CPLUS_INCLUDE_PATH' in os.environ:
    env.AppendENVPath( 'CPLUS_INCLUDE_PATH', os.environ['CPLUS_INCLUDE_PATH'] )
  if 'INTEL_LICENSE_FILE' in os.environ:
    env['ENV']['INTEL_LICENSE_FILE'] = os.environ['INTEL_LICENSE_FILE']
  if 'OMPI_FC' in os.environ:
    env['ENV']['OMPI_FC'] = os.environ['OMPI_FC']
  if 'OMPI_CXX' in os.environ:
    env['ENV']['OMPI_CXX'] = os.environ['OMPI_CXX']


# generate help text
Help(vars.GenerateHelpText(env))

# handle unknown, maybe misspelled variables
unknownVariables = vars.UnknownVariables()

# remove the buildVariablesFile from the list of unknown variables (used before)
if 'buildVariablesFile' in unknownVariables:
  unknownVariables.pop('buildVariablesFile')

# exit in the case of unknown variables
if unknownVariables:
  ConfigurationError("*** The following build variables are unknown: " + str(unknownVariables.keys()))
  
if env['numberOfBasisFunctions'] == 'none':
  ConfigurationError("*** Number of basis function not set.")
  
# check for vector instruction set in release mode
if env['vectorInstructionSet'] == 'none':
  ConfigurationError("*** The vector instruction set needs to be set explicitly.")

#
# precompiler, compiler and linker flags
#

# set compilers
if 'cppCompiler' in env:
  cppCompiler = env['cppCompiler']
else:
  cppCompiler = 'icpc'
    
if 'fortranCompiler' in env:
  fortranCompiler = env['fortranCompiler']
else:
  fortranCompiler = 'ifort'

# set precompiler mode for the number of variables and basis functions
env.Append(F90FLAGS='-DNUMBEROFBASISFUNCTIONS='+env['numberOfBasisFunctions'])
env.Append(F90FLAGS=['-DNUMBEROFVARIABLES=9', '-DGENERATEDKERNELS'])

# set compiler and linker environment variables
for mode in ['FORTRAN', 'F90', 'LINK']:
  env[mode] = fortranCompiler
for mode in ['CC', 'CXX']:
  env[mode]   = cppCompiler

# set level of logger
if env['logLevel'] == 'debug':
  env.Append(F90FLAGS=['-DLOGLEVEL=3'])
  env.Append(CPPDEFINES=['LOG_LEVEL=3'])
elif env['logLevel'] == 'info':
  env.Append(F90FLAGS=['-DLOGLEVEL=2'])
  env.Append(CPPDEFINES=['LOG_LEVEL=2'])
elif env['logLevel'] == 'warning':
  env.Append(F90FLAGS=['-DLOGLEVEL=1'])
  env.Append(CPPDEFINES=['LOG_LEVEL=1'])
elif env['logLevel'] == 'error':
  env.Append(F90FLAGS=['-DLOGLEVEL=0'])
  env.Append(CPPDEFINES=['LOG_LEVEL=0'])
else:
  assert(false)

# set C and C++ flags
env['CFLAGS'] = env['CXXFLAGS'] = env['F90FLAGS']

# add include path for submodules
env.Append( CPPPATH=['#/submodules'] )

# compiler flags for generated kernels
env.Append(CXXFLAGS = ['-Wall', '-ansi', '-std=c++0x'])
if env['compileMode'] == 'debug':
  env.Append(CXXFLAGS=['-O0','-g', '-shared-intel', '-traceback'])
elif env['compileMode'] == 'release':
  env.Append(CXXFLAGS = ['-DNDEBUG', '-O2']) #disable assertions, all warning, ansi standards, optimized code

# set vector instruction set
if env['vectorInstructionSet'] == 'avx':
  env.Append( CFLAGS    = ['-mavx'],
              CXXFLAGS  = ['-mavx'],
              F90FLAGS  = ['-mavx'],
              LINKFLAGS = ['-mavx'] )
elif env['vectorInstructionSet'] == 'sse3':
  env.Append( CFLAGS    = ['-msse3'],
              CXXFLAGS  = ['-msse3'],
              F90FLAGS  = ['-msse3'],
              LINKFLAGS = ['-msse3']  )
elif env['vectorInstructionSet'] == 'mic':
  env.Append( CFLAGS    = ['-mmic'],
              CXXFLAGS  = ['-mmic'],
              F90FLAGS  = ['-mmic'],
              LINKFLAGS = ['-mmic'] )
elif env['vectorInstructionSet'] == 'compile_node':
  env.Append( CFLAGS    = ['-xHost'],
              CXXFLAGS  = ['-xHost'],
              F90FLAGS  = ['-xHost'],
              LINKFLAGS = ['-xHost'] )
else:
  assert(False)

# vector report
#env.Append(CXXFLAGS = ['-vec-report3'])
#env.Append(CFLAGS   = ['-vec-report3'])

# set compile flags for intel compiler
env.Append(F90FLAGS=['-fpp']) #run preprocessor before compiling
  
# enforce 8 byte precision for reals (required in SeisSol)
env.Append(F90FLAGS=['-r8'])

# add pathname to the list of directories wich are search for include
env.Append(F90FLAGS=['-Isrc', '-Iseissol_src'])
env.Append(CXXFLAGS=['-Iseissol_src'])
env.Append(CPPPATH=['#/src'])

# compile all fortran dialects with the same flags
env['FORTRANFLAGS'] = env['F90FLAGS']
env['F77FLAGS'] = env['F90FLAGS']
env['F95FLAGS'] = env['F90FLAGS']

# Add  Linker-flags  for cross-compiling
env.Append(LINKFLAGS=['-nofor-main', '-cxxlib'])

#
# setup the program name and the build directory
#
# compile mode
program_name = '_'+env['compileMode']

# add number of variables and basis functions
program_name += '_'+'9'
program_name += '_'+env['numberOfBasisFunctions']

# build directory
env['programFile'] = env['buildDir']+'/unit_tests'+program_name
env['buildDir'] = env['buildDir']+'/build'+program_name

# set sub directories (important for scons tree)
buildDirectories = ['seissol_src/Numerical_aux', 'seissol_src/Solver']

for buildDir in range(len(buildDirectories)):
  buildDirectories[buildDir] = '#/'+env['buildDir'] + '/' + buildDirectories[buildDir]
env['F90PATH'] = buildDirectories

# set module path
env.Append(F90FLAGS='-module ${TARGET.dir}')

# build unit tests
# define location of cxxtest
env['CXXTEST'] = 'submodules/cxxtest'
  
# Use exception handling & abort testing if tests fail
env.Append( CPPDEFINES=['CXXTEST_HAVE_EH', 'CXXTEST_ABORT_TEST_ON_FAIL'] )
  
# add cxxtest-tool
env.Tool('cxxtest', toolpath=[env['CXXTEST']+'/build_tools/SCons'])
  
# Get test source files
env.sourceFiles = []
env.testSourceFiles = []
  
# get unit test source files
Export('env')
SConscript('#src/'+'SConscript', variant_dir='#/'+env['buildDir'], src_dir='#/', duplicate=0)
Import('env')

# remove .mod entries for the linker
sourceFiles = []
for sourceFile in env.sourceFiles:
  sourceFiles.append(sourceFile[0])

# build unit tests
env.CxxTest( target='#/'+env['programFile'],
             source=env.testSourceFiles+sourceFiles )
